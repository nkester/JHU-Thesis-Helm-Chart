{{- $mongoList := list }}
{{- $fullname := include "firstChart.fullname" . }}
{{- $releaseNamespace := include "firstChart.namespace" . }}
{{- $portNumber := int .Values.mongodb.service.port }}

1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.rstudio.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "firstChart.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.rstudio.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "firstChart.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "firstChart.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.rstudio.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "firstChart.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

{{- if .Values.postgresql.enabled }}

2a. PostgreSQL can be accessed via port 5432 on the following DNS name from within your cluster:

  Execute kubectl get svc --namespace <your namespace>
    The pg service with a cluster IP (not headless) should be combined with the following information to create the host: <service name>.<namespace>.svc.cluster.local
    The user is 'postgres'
    The port is 5432
    The password is: '{{ .Values.postgresql.postgresqlPassword }}'
    
{{- end}}

{{- if .Values.mongodb.enabled }}

2b. MongoDB deployment  

** Please be patient while the chart is being deployed **

MongoDB can be accessed on the following DNS name(s) and ports from within your cluster:

{{- if eq .Values.mongodb.architecture "replicaset" }}
{{ join "\n" $mongoList | nindent 4 }}
{{- else }}

    {{ $fullname }}.{{ $releaseNamespace }}.svc.{{ .Values.mongodb.clusterDomain }}

{{- end }}

{{- if .Values.mongodb.auth.enabled }}

To get the root password run:

    export MONGODB_ROOT_PASSWORD=$(kubectl get secret --namespace {{ template "firstChart.namespace" . }} {{ template "firstChart.fullname" . }} -o jsonpath="{.data.mongodb-root-password}" | base64 --decode)

{{- end }}

{{- if and .Values.mongodb.auth.username .Values.mongodb.auth.database .Values.mongodb.auth.password }}

To get the password for "{{ .Values.mongodb.auth.username }}" run:

    export MONGODB_PASSWORD=$(kubectl get secret --namespace {{ template "firstChart.namespace" . }} {{ template "firstChart.fullname" . }} -o jsonpath="{.data.mongodb-password}" | base64 --decode)

{{- end }}

{{- if and .Values.mongodb.auth.username .Values.mongodb.auth.database .Values.mongodb.auth.password }}

To get the password for "{{ .Values.mongodb.auth.username }}" run:

    export MONGODB_PASSWORD=$(kubectl get secret --namespace {{ template "firstChart.namespace" . }} {{ template "firstChart.fullname" . }} -o jsonpath="{.data.mongodb-password}" | base64 --decode)

{{- end }}

To connect to your database, create a MongoDB client container:

    kubectl run --namespace {{ template "firstChart.namespace" . }} {{ template "firstChart.fullname" . }}-client --rm --tty -i --restart='Never' --env="MONGODB_ROOT_PASSWORD=$MONGODB_ROOT_PASSWORD" --image {{ template "mongodb.image" . }} --command -- bash

Then, run the following command:

    {{- if eq .Values.architecture "replicaset" }}
    mongo admin --host "{{ join "," $mongoList }}" {{- if .Values.mongodb.auth.enabled }} --authenticationDatabase admin -u root -p $MONGODB_ROOT_PASSWORD{{- end }}
    {{- else }}
    mongo admin --host "{{ template "firstChart.fullname" . }}" {{- if .Values.mongodb.auth.enabled }} --authenticationDatabase admin -u root -p $MONGODB_ROOT_PASSWORD{{- end }}
    {{- end }}

{{- if and (eq .Values.mongodb.architecture "replicaset") .Values.mongodb.externalAccess.enabled }}

To connect to your database nodes from outside, you need to add both primary and secondary nodes hostnames/IPs to your Mongo client. To obtain them, follow the instructions below:

{{- if eq "NodePort" .Values.externalAccess.service.type }}
{{- if .Values.externalAccess.service.domain }}

    MongoDB nodes domain: Use your provided hostname to reach MongoDB nodes, {{ .Values.externalAccess.service.domain }}

{{- else }}

    MongoDB nodes domain: you can reach MongoDB nodes on any of the K8s nodes external IPs.

        kubectl get nodes -o wide

{{- end }}

    MongoDB nodes port: You will have a different node port for each MongoDB node. You can get the list of configured node ports using the command below:

        echo "$(kubectl get svc --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ template "mongodb.name" . }},app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=mongodb,pod" -o jsonpath='{.items[*].spec.ports[0].nodePort}' | tr ' ' '\n')"

{{- else if contains "LoadBalancer" .Values.externalAccess.service.type }}

  NOTE: It may take a few minutes for the LoadBalancer IPs to be available.
        Watch the status with: 'kubectl get svc --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ template "mongodb.name" . }},app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=mongodb,pod" -w'

    MongoDB nodes domain: You will have a different external IP for each MongoDB node. You can get the list of external IPs using the command below:

        echo "$(kubectl get svc --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ template "mongodb.name" . }},app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=mongodb,pod" -o jsonpath='{.items[*].status.loadBalancer.ingress[0].ip}' | tr ' ' '\n')"

    MongoDB nodes port: {{ .Values.externalAccess.service.port }}

{{- end }}

{{- else if eq .Values.architecture "standalone" }}

To connect to your database from outside the cluster execute the following commands:

{{- if contains "NodePort" .Values.service.type }}

    export NODE_IP=$(kubectl get nodes --namespace {{ template "firstChart.namespace" . }} -o jsonpath="{.items[0].status.addresses[0].address}")
    export NODE_PORT=$(kubectl get --namespace {{ template "firstChart.namespace" . }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ template "firstChart.fullname" . }})
    mongo --host $NODE_IP --port $NODE_PORT {{- if .Values.auth.enabled }} --authenticationDatabase admin -p $MONGODB_ROOT_PASSWORD{{- end }}

{{- else if contains "LoadBalancer" .Values.service.type }}

  NOTE: It may take a few minutes for the LoadBalancer IP to be available.
        Watch the status with: 'kubectl get svc --namespace {{ template "firstChart.namespace" . }} -w {{ template "firstChart.fullname" . }}'

    export SERVICE_IP=$(kubectl get svc --namespace {{ template "firstChart.namespace" . }} {{ template "firstChart.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
    mongo --host $SERVICE_IP --port {{ $portNumber }} {{- if .Values.auth.enabled }} --authenticationDatabase admin -p $MONGODB_ROOT_PASSWORD{{- end }}

{{- else if contains "ClusterIP" .Values.service.type }}

    kubectl port-forward --namespace {{ template "firstChart.namespace" . }} svc/{{ template "firstChart.fullname" . }} {{ $portNumber }}:{{ $portNumber }} &
    mongo --host 127.0.0.1 {{- if .Values.auth.enabled }} --authenticationDatabase admin -p $MONGODB_ROOT_PASSWORD{{- end }}

{{- end }}
{{- end }}
{{- end }}